{
  "openapi": "3.0.0",
  "info": {
    "version": "v1",
    "title": "Keitaro Admin API",
    "x-logo": {
      "url": "assets/logo.png",
      "altText": "Keitaro logo"
    }
  },
  "servers": [
    {
      "url": "/admin_api/v1"
    }
  ],
  "paths": {
    "/affiliate_networks": {
      "get": {
        "tags": [
          "Affiliate networks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "List all affiliate networks",
        "description": "Returns a list all affiliate networks.",
        "responses": {
          "200": {
            "description": "Affiliate networks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AffiliateNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/affiliate_networks');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "post": {
        "tags": [
          "Affiliate networks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Create an affiliate network",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AffiliateNetworkRequest"
              }
            }
          }
        },
        "summary": "Create an affiliate network",
        "description": "Create an affiliate network",
        "responses": {
          "200": {
            "description": "Affiliate network details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateNetwork"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/affiliate_networks');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_POST, 1);\n$params = [\"name\" => \"test\", \"postback_url\" => \"http://postback\"];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/affiliate_networks/{id}": {
      "get": {
        "tags": [
          "Affiliate networks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Affiliate network ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Retrieve Affiliate network details",
        "description": "Retrieve affiliate metwork details",
        "responses": {
          "200": {
            "description": "Affiliate network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateNetwork"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/affiliate_networks/1');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "put": {
        "tags": [
          "Affiliate networks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Affiliate network ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Affiliate network fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AffiliateNetworkPut"
              }
            }
          }
        },
        "summary": "Update Affiliate network",
        "description": "Update an Affiliate network",
        "responses": {
          "200": {
            "description": "Affiliate network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateNetwork"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$params = [\"name\": \"test2\", \"postback_url\": \"http://postback2\"];\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/affiliate_networks/4');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "delete": {
        "tags": [
          "Affiliate networks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Affiliate network ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Move affiliate network to the archive",
        "description": "Move affiliate network to the archive",
        "responses": {
          "200": {
            "description": "Affiliate network details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateNetwork"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/affiliate_networks/1');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/affiliate_networks/{id}/clone": {
      "post": {
        "tags": [
          "Affiliate networks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Affiliate network ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Clone affiliate network",
        "description": "Clone affiliate network",
        "responses": {
          "200": {
            "description": "Affiliate network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateNetwork"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, '/admin_api/v1/affiliate_networks/1/clone');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/affiliate_networks/{id}/restore": {
      "post": {
        "tags": [
          "Affiliate networks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Affiliate network ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Restore affiliate network",
        "description": "Restore a affiliate network",
        "responses": {
          "201": {
            "description": "Restore a affiliate network",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AffiliateNetwork"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/affiliate_networks/clean_archive": {
      "post": {
        "tags": [
          "Affiliate networks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clean archive",
        "description": "Clean archive",
        "responses": {
          "200": {
            "description": "The archive was cleaned successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/affiliate_networks/deleted": {
      "get": {
        "tags": [
          "Affiliate networks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get deleted affiliate networks",
        "description": "Get deleted affiliate networks",
        "responses": {
          "200": {
            "description": "Returns deleted affiliate networks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/AffiliateNetwork"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/botlist": {
      "get": {
        "tags": [
          "Bot list"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Retrieve rows from the bot list",
        "description": "Retrieve rows from the bot list",
        "responses": {
          "200": {
            "description": "Retrieve rows from the bot list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "value": {
                      "type": "string",
                      "description": "Rows"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/botlist');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "put": {
        "tags": [
          "Bot list"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update the bot list",
        "description": "Update the bot list",
        "requestBody": {
          "description": "Update the bot list",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update the bot list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/botlist');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\n\n$params = [\n'value' => \"3.3.3.3\\n5.5.5.5\"\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      },
      "delete": {
        "tags": [
          "Bot list"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clear the bot list",
        "description": "Clear the bot list",
        "responses": {
          "200": {
            "description": "Clear the bot list"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/botlist');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/botlist/add": {
      "post": {
        "tags": [
          "Bot list"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Add IPs to the bot list",
        "description": "Add IPs to the bot list",
        "requestBody": {
          "description": "Add IPs to the bot list",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Add IPs to the bot list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/botlist/add');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\n\n$params = [\n'value' => \"1.1.1.2\"\n];\n\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/botlist/exclude": {
      "post": {
        "tags": [
          "Bot list"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Remove IPs from the bot list",
        "description": "Remove IPs from the bot list",
        "requestBody": {
          "description": "Remove IPs from the bot list",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BotListRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Remove IPs from the bot list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "count": {
                      "type": "integer"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/botlist/exclude');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\n\n$params = [\n'value' => \"1.1.1.2\"\n];\n\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/campaigns": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get all campaigns",
        "description": "Returns the campaigns",
        "parameters": [
          {
            "in": "query",
            "name": "offset",
            "schema": {
              "type": "integer"
            },
            "description": "The number of campaigns to skip before starting to collect the result set."
          },
          {
            "in": "query",
            "name": "limit",
            "schema": {
              "type": "integer"
            },
            "description": "The numbers of campaigns to return."
          }
        ],
        "responses": {
          "200": {
            "description": "Campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Campaign"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "post": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create campaign",
        "description": "Creates campaign",
        "requestBody": {
          "description": "Creates campaign",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/CampaignRequest"
                  },
                  {
                    "$ref": "#/components/schemas/CampaignCreateRequired"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Campaign details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\n$params = [\n'name' => 'Test Campaign X',\n'alias' => 'test-campaign-x',\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/campaigns/{id}": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get campaign",
        "description": "Returns campaign information",
        "responses": {
          "200": {
            "description": "Campaign information",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns/89');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "put": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update campaign",
        "description": "Update a campaign",
        "requestBody": {
          "description": "Fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a Campaign",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_POST, 1);\n$params = [\n'name' => 'Test Campaign X2',\n'alias' => 'test-campaign-x2',\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      },
      "delete": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Move campaign to archive",
        "description": "Moves campaign to archive",
        "responses": {
          "201": {
            "description": "It's done",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns/734');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/campaigns/{id}/clone": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Clone Campaign",
        "description": "Clone a Campaign",
        "responses": {
          "200": {
            "description": "Clone a Campaign",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns/734/clone');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, '');\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/campaigns/{id}/disable": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Disable Campaign",
        "description": "Disable a Campaign",
        "responses": {
          "200": {
            "description": "Disable a Campaign",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns/662/disable');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/campaigns/{id}/enable": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Enable Campaign",
        "description": "Enable a Campaign",
        "responses": {
          "200": {
            "description": "Enable a Campaign",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns/662/enable');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/campaigns/{id}/restore": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Restore Campaign",
        "description": "Restore a Campaign",
        "responses": {
          "200": {
            "description": "Restore a Campaign",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Campaign"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns/734/restore');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/campaigns/{id}/streams": {
      "get": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get flows",
        "description": "Returns campaign flows",
        "responses": {
          "200": {
            "description": "List of flows",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Stream"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns/2/streams');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/campaigns/{id}/update_costs": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update costs for campaign",
        "description": "<p>Updates campaign costs.</p> <b>IMPORTANT!</b> That actions is VERY SLOW. Use <a href=\"#tag/Clicks/paths/~1clicks~1update_costs/post\">Update costs in bulk</a> instead</p>",
        "requestBody": {
          "description": "Options",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CampaignCostRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job successfully scheduled"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$params = [\n'start_date' => '2017-09-10 00:00:00',\n'end_date' => '2017-09-12 00:00:00',\n'cost' => 10.02,\n'currency' => 'EUR',\n'timezone' => 'Europe/Moscow',\n'only_campaign_uniques' => 1,\n'filters': ['sub_id_1' => '1,2,3', 'source': 'site.ru']\n];\n\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns/2/update_costs');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/campaigns/clean_archive": {
      "post": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clean archive",
        "description": "Clean archive",
        "responses": {
          "200": {
            "description": "The archive was cleaned successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/campaigns/deleted": {
      "get": {
        "tags": [
          "Campaigns"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get deleted campaigns",
        "description": "Get deleted campaigns",
        "responses": {
          "200": {
            "description": "Returns deleted campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Campaign"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/campaigns/deleted');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/clicks/clean": {
      "post": {
        "tags": [
          "Clean stats"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clean stats",
        "description": "Clean stats",
        "requestBody": {
          "description": "Cleans the statistics",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CleanRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clean job successfully scheduled.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$params = [\n\"start_date\": \"2017-04-01\",\n\"end_date\": \"2017-04-10\",\n\"timezone\": \"UTC\"\n];\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/clicks/clean');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_POST, true);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/clicks/log": {
      "post": {
        "tags": [
          "Clicks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get clicks",
        "description": "Returns clicks information.",
        "requestBody": {
          "description": "Clicks information.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClickRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Clicks",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/clicks/update_costs": {
      "post": {
        "tags": [
          "Clicks"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update costs in bulk",
        "description": "Updates costs.",
        "requestBody": {
          "description": "",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ClicksUpdateCostsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Job successfully scheduled.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/conversions/log": {
      "post": {
        "tags": [
          "Conversions"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get conversions",
        "description": "Returns conversions",
        "requestBody": {
          "description": "Conversions",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConversionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Conversions",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\n$params = [\n'columns' => ['postback_datetime', 'click_datetime', 'sub_id'],\n'filters' => [\n['name' => 'status', 'operator' => 'EQUALS', 'expression' => 'lead']\n],\n'order' => [['postback_datetime', 'DESC']],\n'range' => [\n'from' => '2017-01-01',\n'to' => '2018-04-01'\n]\n];\n\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/conversions/log');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\n\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get the list of domains",
        "description": "Returns list of the domains",
        "responses": {
          "200": {
            "description": "List of the domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Domain"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/domains');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "post": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Create a domain",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DomainRequest"
                  },
                  {
                    "$ref": "#/components/schemas/DomainCreateRequired"
                  }
                ]
              }
            }
          }
        },
        "summary": "Create domain",
        "description": "Create a domain",
        "responses": {
          "200": {
            "description": "Domain data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Domain"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/domains');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\n$params = [\n'name' => 'domain1.com',\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/domains/{id}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get domain",
        "description": "Return domain details.",
        "responses": {
          "200": {
            "description": "Domain details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/domains/1');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "put": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update domain",
        "description": "Updates domain.",
        "requestBody": {
          "description": "Domain fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DomainRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/domains');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_POST, 1);\n$params = [\n'name' => 'domain1.com',\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Move Domain to Archive",
        "description": "Move a Domain to Archive",
        "responses": {
          "201": {
            "description": "Move a Domain to Archive",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/domains/1');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/domains/{id}/check": {
      "post": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update Domain Status",
        "description": "Update Domain Status",
        "responses": {
          "200": {
            "description": "Domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/domains/1/check');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/domains/{id}/restore": {
      "post": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Domain ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Restore an Archived Domain",
        "description": "Restore an Archived Domain",
        "responses": {
          "200": {
            "description": "Domain",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Domain"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/domains/734/restore');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/domains/clean_archive": {
      "post": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clean archive",
        "description": "Clean archive",
        "responses": {
          "200": {
            "description": "The archive was cleaned successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/domains/deleted": {
      "get": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get deleted domains",
        "description": "Returns list of the domains.",
        "responses": {
          "200": {
            "description": "List of the domains",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Domain"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/domains/deleted');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/domains/ip": {
      "get": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Retrieve server ip",
        "description": "Retrieve server ip",
        "responses": {
          "200": {
            "description": "Server ip",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "ipv4": {
                      "type": "string",
                      "description": "IPv4 address"
                    },
                    "ipv6": {
                      "type": "string",
                      "description": "IPv6 address"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/domains/register": {
      "post": {
        "tags": [
          "Domains"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Register a domain",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/DomainRequest"
                  },
                  {
                    "$ref": "#/components/schemas/DomainCreateRequired"
                  }
                ]
              }
            }
          }
        },
        "summary": "Register the domain",
        "description": "<p>Register the domain</p> <b>IMPORTANT!</b> You should have installed integration with namecheap and, optional, with cloudflare (if you want to add zone to cloudflare via cloudflare_proxy param)",
        "responses": {
          "200": {
            "description": "Domain",
            "content": {
              "application/json": {
                "schema": {
                  "allOf": [
                    {
                      "$ref": "#/components/schemas/Domain"
                    },
                    {
                      "$ref": "#/components/schemas/DomainRegister"
                    }
                  ]
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "422": {
            "$ref": "#/components/responses/UnprocessableEntity"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/groups": {
      "get": {
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "query",
            "description": "Group type",
            "required": true,
            "schema": {
              "type": "string",
              "default": "campaigns",
              "enum": [
                "campaigns",
                "offers",
                "landings",
                "domains"
              ]
            }
          }
        ],
        "summary": "Get groups",
        "description": "Returns list of the groups",
        "responses": {
          "200": {
            "description": "List of the groups",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Group"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/groups?type=campaigns');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "post": {
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create croup",
        "description": "Creates group.",
        "requestBody": {
          "description": "Group fields.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/GroupRequest"
                  },
                  {
                    "$ref": "#/components/schemas/GroupCreateRequired"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/groups');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\n$params = [\n'name' => 'Test Group X',\n'position' => '10',\n'type' => 'campaigns',\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/groups/{id}": {
      "put": {
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update Group",
        "description": "Update a Group",
        "requestBody": {
          "description": "Update a Group",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GroupRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/groups/19');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_POST, 1);\n$params = [\n'id' => 19,\n'name' => 'Test Group X2',\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/groups/{id}/delete": {
      "delete": {
        "tags": [
          "Groups"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Group ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Delete Group",
        "description": "Delete a Group",
        "responses": {
          "200": {
            "description": "Group",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Group"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/offers/19/delete');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\n$params = [\n'id' => 19\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/integrations/facebook": {
      "get": {
        "tags": [
          "Third-party integrations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get Facebook integrations",
        "description": "Returns list of Facebook integrations",
        "responses": {
          "200": {
            "description": "List of Facebook integrations",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Facebook"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "tags": [
          "Third-party integrations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create Facebook Integration",
        "description": "Creates Facebook integration.",
        "requestBody": {
          "description": "Integration details.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FacebookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Facebook"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/integrations/facebook/{id}": {
      "get": {
        "tags": [
          "Third-party integrations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get Facebook integration",
        "description": "Returns Facebook integration details",
        "responses": {
          "200": {
            "description": "Integration details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Facebook"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "Third-party integrations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update Facebook integration",
        "description": "Updates Facebook integration.",
        "requestBody": {
          "description": "Integration fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/FacebookRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Integration details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/Facebook"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Third-party integrations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Delete Facebook integration",
        "description": "Delete Facebook integration",
        "responses": {
          "200": {
            "description": "Successfully deleted",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/integrations/facebook/{id}/campaign": {
      "get": {
        "tags": [
          "Third-party integrations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get assigned campaigns.",
        "description": "Returns list of assigned campaigns.",
        "responses": {
          "200": {
            "description": "List of assigned campaigns",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/OptionNumber"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "tags": [
          "Third-party integrations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Assign to campaign",
        "description": "Assigns FB integration to campaigns.",
        "requestBody": {
          "description": "Campaign IDs",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "campaign_id": {
                    "description": "Campaign ID",
                    "type": "integer"
                  }
                },
                "required": [
                  "campaign_id"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully added"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Third-party integrations"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Integration ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "requestBody": {
          "description": "Campaign ID",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "campaign_id": {
                    "description": "Campaign ID",
                    "type": "integer"
                  }
                },
                "required": [
                  "campaign_id"
                ]
              }
            }
          }
        },
        "summary": "Dissociate campaign",
        "description": "Dissociates campaign",
        "responses": {
          "200": {
            "description": "Successfully done"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages": {
      "get": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get landing pages",
        "description": "Returns list of the landing pages",
        "responses": {
          "200": {
            "description": "List of the landing pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Landing"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create landing page",
        "description": "Creates landing page",
        "requestBody": {
          "description": "Landing page fields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/LandingRequest"
                  },
                  {
                    "$ref": "#/components/schemas/LandingCreateRequired"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Landing page details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Landing"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/{id}": {
      "get": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get Landing Page",
        "description": "Get a Landing Page",
        "responses": {
          "200": {
            "description": "Landing Page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Landing"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update Landing Page",
        "description": "Update a Landing Page",
        "requestBody": {
          "description": "Update a Landing Page",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LandingRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Update a Landing Page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Landing"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Archive Landing Page",
        "description": "Archive a Landing Page",
        "responses": {
          "200": {
            "description": "Landing Page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Landing"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/{id}/add_file": {
      "post": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Path to the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Create a File",
        "description": "Create a Local Landing Page File",
        "responses": {
          "200": {
            "description": "Create a Local Landing Page File",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/{id}/clone": {
      "put": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Clone Landing Page",
        "description": "Clone a Landing Page",
        "responses": {
          "200": {
            "description": "Landing Page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Landing"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/{id}/download": {
      "get": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Download",
        "description": "Pack and Download the Files of the Landing Page",
        "responses": {
          "200": {
            "description": "Binary Content of a Zip File",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/{id}/get_file": {
      "get": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "File path. It must be relative, i.e. `order/success.html`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Read File",
        "description": "Read the Content of the File",
        "responses": {
          "200": {
            "description": "File Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/{id}/get_structure": {
      "get": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get Files Structure",
        "description": "Get Files Structure of the Local Landing Page",
        "responses": {
          "200": {
            "description": "Get Files Structure of the Local Landing Page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditorFiles"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/{id}/remove_file": {
      "delete": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Path to the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Remove file",
        "description": "Remove the File of the Local Landing Page",
        "responses": {
          "200": {
            "description": "Remove the File of the Local Landing Page",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/{id}/restore": {
      "post": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Restore landing page",
        "description": "Restore a landing page",
        "responses": {
          "201": {
            "description": "Restore a landing page",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Landing"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/{id}/update_file": {
      "put": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Landing Page ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Path to the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "in": "query",
            "description": "New File Data",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Save File Data",
        "description": "Save the File Data of the Local Landing Page",
        "responses": {
          "200": {
            "description": "Save File Data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/clean_archive": {
      "post": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clean archive",
        "description": "Clean archive",
        "responses": {
          "200": {
            "description": "The archive was cleaned successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/landing_pages/deleted": {
      "get": {
        "tags": [
          "Landing pages"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get deleted landing pages",
        "description": "Get deleted landing pages",
        "responses": {
          "200": {
            "description": "Returns deleted landing pages",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Landing"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/logs/{type}": {
      "get": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get log",
        "description": "Returns log rows",
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Logs type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "audit",
                "system",
                "traffic",
                "postbacks",
                "ssl",
                "sent_postbacks"
              ]
            }
          },
          {
            "name": "limit",
            "in": "query",
            "description": "Limit rows",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "offset",
            "in": "query",
            "description": "Offset",
            "required": false,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "required": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Logs",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Logs"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "type",
            "in": "path",
            "description": "Log type",
            "required": true,
            "schema": {
              "type": "string",
              "enum": [
                "system",
                "traffic",
                "postbacks",
                "ssl",
                "sent_postbacks"
              ]
            }
          }
        ],
        "summary": "Clean log",
        "description": "Cleans log",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/logs/types": {
      "post": {
        "tags": [
          "Logs"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get log types",
        "description": "Returns list of log types",
        "responses": {
          "200": {
            "description": "List of log types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/offers": {
      "get": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get offers",
        "description": "Returns list of the offers",
        "responses": {
          "200": {
            "description": "List of offers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Offer"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/offers');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);"
          }
        ]
      },
      "post": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create offer",
        "description": "Creates offer",
        "requestBody": {
          "description": "Offer fields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "allOf": [
                  {
                    "$ref": "#/components/schemas/OfferRequest"
                  },
                  {
                    "$ref": "#/components/schemas/OfferCreateRequired"
                  }
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offer details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/offers');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\n$params = [\n'name' => 'Test Offer X',\n'offer_type' => 'external',\n'action_type' => 'http',          // HTTP redirect\n'action_payload' => 'http://offer.com?ad_campaign_id={ad_campaign_id}&stream_id={stream_id}',\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/offers/{id}": {
      "get": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get offer",
        "description": "Returns offer",
        "responses": {
          "200": {
            "description": "Offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update offer",
        "description": "Updates offer",
        "requestBody": {
          "description": "Update an Offer",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OfferRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/offers/16');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'PUT');\ncurl_setopt($ch, CURLOPT_POST, 1);\n$params = [\n'name' => 'Test Offer X2',\n'offer_type' => 'external',\n'action_type' => 'http',          // HTTP redirect\n'action_payload' => 'http://offer.com?ad_campaign_id={ad_campaign_id}'\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/offers/{id}/add_file": {
      "post": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "Path to the File",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Create file",
        "description": "Create the File of the Local Offer",
        "responses": {
          "200": {
            "description": "Create the File of the Local Offer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/offers/{id}/archive": {
      "delete": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Delete offer",
        "description": "Moves offer to archive",
        "responses": {
          "200": {
            "description": "Offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/offers/16/archive');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_CUSTOMREQUEST, 'DELETE');\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/offers/{id}/clone": {
      "post": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Clone offer",
        "description": "Clones offer",
        "responses": {
          "200": {
            "description": "Offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/offers/{id}/download": {
      "get": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Download",
        "description": "Packs and downloads the files.",
        "responses": {
          "200": {
            "description": "Binary Content of a Zip File",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/offers/{id}/get_file": {
      "get": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "File path, i.e. `order/success.html`.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Read File",
        "description": "Read the Content of the File",
        "responses": {
          "200": {
            "description": "File content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/offers/{id}/get_structure": {
      "get": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get file structure",
        "description": "Returns the file structure.",
        "responses": {
          "200": {
            "description": "File structure",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/EditorFiles"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "description": "unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                }
              }
            }
          }
        }
      }
    },
    "/offers/{id}/remove_file": {
      "delete": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "File path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Delete file",
        "description": "Deletes the file.",
        "responses": {
          "200": {
            "description": "New file structure",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/offers/{id}/restore": {
      "post": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Restore offer",
        "description": "Restore a offer",
        "responses": {
          "201": {
            "description": "Restore a offer",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Offer"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/offers/{id}/update_file": {
      "put": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Offer ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "path",
            "in": "query",
            "description": "File path",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "data",
            "in": "query",
            "description": "File cointent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Upload file",
        "description": "Saves file on server.",
        "responses": {
          "200": {
            "description": "Save the File Data",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "path": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/offers/clean_archive": {
      "post": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clean archive",
        "description": "Clean archive",
        "responses": {
          "200": {
            "description": "The archive was cleaned successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/offers/deleted": {
      "get": {
        "tags": [
          "Offers"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get deleted offers",
        "description": "Get deleted offers",
        "responses": {
          "200": {
            "description": "Returns deleted offers",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Offer"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/report/build": {
      "post": {
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Build custom report",
        "description": "<style>\n  .list-flex {\n    display: flex;\n    list-style: none;\n    flex-wrap: wrap;\n  }\n  .list-flex li {\n    width: 200px;\n  }\n</style>\n<h3 id='operators'>\nList of available operators:\n</h3>\n<div class=\"table sectionedit75 table-responsive\"><table class=\"inline table table-striped table-condensed table-bordered\">\n    <thead>\n    <tr class=\"row0\">\n        <th class=\"col0 leftalign\"> Operator  </th><th class=\"col1 leftalign\"> Type  </th><th class=\"col2 leftalign\"> Expression Example  </th>\n    </tr>\n    </thead>\n    <tbody><tr class=\"row1\">\n        <td class=\"col0\"> EQUALS </td><td class=\"col1 leftalign\"> Number  </td><td class=\"col2 leftalign\"> 10  </td>\n    </tr>\n    <tr class=\"row2\">\n        <td class=\"col0 leftalign\"> NOT_EQUAL  </td><td class=\"col1 leftalign\"> Number  </td><td class=\"col2 leftalign\"> 10  </td>\n    </tr>\n    <tr class=\"row3\">\n        <td class=\"col0 leftalign\"> EQUALS_OR_GREATER_THAN  </td><td class=\"col1 leftalign\"> Number  </td><td class=\"col2 leftalign\"> 10  </td>\n    </tr>\n    <tr class=\"row4\">\n        <td class=\"col0 leftalign\"> EQUALS_OR_LESS_THAN  </td><td class=\"col1 leftalign\"> Number  </td><td class=\"col2 leftalign\"> 10  </td>\n    </tr>\n    <tr class=\"row5\">\n        <td class=\"col0 leftalign\"> GREATER_THAN  </td><td class=\"col1 leftalign\"> Number  </td><td class=\"col2 leftalign\"> 10  </td>\n    </tr>\n    <tr class=\"row6\">\n        <td class=\"col0 leftalign\"> LESS_THAN  </td><td class=\"col1 leftalign\"> Number  </td><td class=\"col2\"> 10</td>\n    </tr>\n    <tr class=\"row7\">\n        <td class=\"col0 leftalign\"> MATCH_REGEXP  </td><td class=\"col1 leftalign\"> String  </td><td class=\"col2 leftalign\"> /uuid=100[0-9]{2}/  </td>\n    </tr>\n    <tr class=\"row8\">\n        <td class=\"col0 leftalign\"> NOT_MATCH_REGEXP  </td><td class=\"col1 leftalign\"> String  </td><td class=\"col2 leftalign\"> /uuid=100[0-9]{2}/  </td>\n    </tr>\n    <tr class=\"row9\">\n        <td class=\"col0\"> BEGINS_WITH </td><td class=\"col1 leftalign\"> String  </td><td class=\"col2 leftalign\"> abc  </td>\n    </tr>\n    <tr class=\"row10\">\n        <td class=\"col0\"> ENDS_WITH </td><td class=\"col1 leftalign\"> String  </td><td class=\"col2 leftalign\"> zyx  </td>\n    </tr>\n    <tr class=\"row11\">\n        <td class=\"col0 leftalign\"> CONTAINS  </td><td class=\"col1 leftalign\"> String  </td><td class=\"col2 leftalign\"> mnp  </td>\n    </tr>\n    <tr class=\"row12\">\n        <td class=\"col0 leftalign\"> NOT_CONTAIN  </td><td class=\"col1 leftalign\"> String  </td><td class=\"col2 leftalign\"> abc  </td>\n    </tr>\n    <tr class=\"row13\">\n        <td class=\"col0 leftalign\"> IN_LIST  </td><td class=\"col1 leftalign\"> Array  </td><td class=\"col2 leftalign\"> [“a”, “b”, “c”]  </td>\n    </tr>\n    <tr class=\"row14\">\n        <td class=\"col0 leftalign\"> NOT_IN_LIST  </td><td class=\"col1 leftalign\"> Array  </td><td class=\"col2 leftalign\"> [“a”, “b”, “c”]  </td>\n    </tr>\n    <tr class=\"row15\">\n        <td class=\"col0 leftalign\"> BETWEEN  </td><td class=\"col1 leftalign\"> Array  </td><td class=\"col2\"></td>\n    </tr>\n    <tr class=\"row16\">\n        <td class=\"col0 leftalign\"> IS_SET  </td><td class=\"col1 leftalign\">   </td><td class=\"col2\"></td>\n    </tr>\n    <tr class=\"row17\">\n        <td class=\"col0 leftalign\"> IS_NOT_SET  </td><td class=\"col1 leftalign\">   </td><td class=\"col2\"></td>\n    </tr>\n    <tr class=\"row18\">\n        <td class=\"col0 leftalign\"> IS_TRUE   </td><td class=\"col1 leftalign\">   </td><td class=\"col2\"></td>\n    </tr>\n    <tr class=\"row19\">\n        <td class=\"col0 leftalign\"> IS_FALSE   </td><td class=\"col1 leftalign\">   </td><td class=\"col2\"></td>\n    </tr>\n    <tr class=\"row20\">\n        <td class=\"col0 leftalign\"> HAS_LABEL   </td><td class=\"col1 leftalign\"> <code>whitelist</code> or <code>blacklist</code>   </td><td class=\"col2\"></td>\n    </tr>\n    <tr class=\"row21\">\n        <td class=\"col0 leftalign\"> NOT_HAS_LABEL  </td><td class=\"col1 leftalign\"> <code>whitelist</code> or <code>blacklist</code>   </td><td class=\"col2\"></td>\n    </tr>\n</tbody></table></div>\n<h3 class=\"sectionedit78\" id=\"field_metrics\">Field 'metrics'</h3>\n<div class=\"level3\">\n\n<h4>\nStats\n</h4>\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> clicks</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> campaign_unique_clicks</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> stream_unique_clicks</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> global_unique_clicks</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> uc_campaign_rate</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> uc_stream_rate</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> uc_global_rate</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> bots</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> bot_share</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> proxies</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> empty_referrers</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> conversions</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> leads</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> sales</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> rejected</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> rebills</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> approve</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> lp_clicks</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> lp_ctr</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> landing_clicked_period</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> cr</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> crs</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> crl</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> roi</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> roi_confirmed</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> epc</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> epc_confirmed</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> cps</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> cpa</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> cpc</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ecpc</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ecpm</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ecpm_confirmed</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ec</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ec_confirmed</div>\n</li>\n</ul>\n\n<h4>\nMoney\n</h4>\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> profitability</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> cost</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> revenue</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> profit</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> lead_revenue</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> sale_revenue</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> rejected_revenue</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> profit_confirmed</div>\n</li>\n</ul>\n\n</div>\n<h3 class=\"sectionedit79\" id=\"field_columns1\">Field 'columns'</h3>\n<div class=\"level3\">\n\n<h4>\nIDS\n</h4>\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> click_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> sub_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> visitor_code</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> campaign_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> campaign_group_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> parent_campaign_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> landing_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> offer_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ts_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> stream_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> language_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> device_type_id</div>\n</li>\n</ul>\n\n<h4>\nData\n</h4>\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> campaign</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> campaign_group</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> parent_campaign</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> landing</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> landing_clicked_datetime</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> landing_clicked_period</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> offer</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ts</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> affiliate_network</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> stream</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> language</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> device_type</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> connection_type</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ip</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> country_code</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> country</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> region</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> city</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> user_agent</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> operator</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> os</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> os_version</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> browser</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> browser_version</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> device_model</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> isp</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> source</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> referrer</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> search_engine</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> keyword</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> destination</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> sub_id_1..30</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> extra_param_1..10</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> revenue</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> cost</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> profit</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ad_campaign_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> external_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> creative_id</div>\n</li>\n</ul>\n\n<h4>\nFlags\n</h4>\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> is_unique_stream</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> is_unique_campaign</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> is_lead</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> is_sale</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> is_rejected</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> is_bot</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> is_using_proxy</div>\n</li>\n</ul>\n\n<h4>\nDate and Time\n</h4>\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> datetime</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> year</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> month</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> week</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> weekday</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> day</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> hour</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> day_hour</div>\n</li>\n</ul>\n\n<h4>\nOther\n</h4>\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> ip_mask1</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ip_mask2</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> label</div>\n</li>\n</ul>\n\n<h4>\nConversions Specific (for Entry-point <a href=\"#tag/Conversions\" title=\"admin-api ↵\" class=\"wikilink1\">Conversions</a>):\n</h4>\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> conversion_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> click_datetime</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> postback_datetime</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> sale_datetime</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> sale_period</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> tid</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> status</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> previous_status</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> original_status</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> params</div>\n</li>\n</ul>\n\n</div>\n",
        "requestBody": {
          "description": "Build a custom report",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ReportsRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reports",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Report"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "<?php\n$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/report/build');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_POST, 1);\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n$params = [\n    'range' => [\n        'from' => '2017-09-10',\n        'to' => '2017-09-12',\n        'timezone' => 'Europe/Madrid'\n    ],\n    'dimensions' => ['ts', 'landing'],\n    'metrics' => ['clicks', 'bot_share', 'cr'],\n    'filters' => [\n        \"OR\" => [\n            \"AND\" => [\n                ['name' => 'campaign_id', 'operator' => 'EQUALS', 'expression' => 4],\n                ['name' => 'stream_id', 'operator' => 'EQUALS', 'expression' => 8],\n            ],\n            ['name' => 'campaign_id', 'operator' => 'EQUALS', 'expression' => 5]\n        ]\n    ]\n];\ncurl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($params));\necho curl_exec($ch);"
          }
        ]
      }
    },
    "/report/labels": {
      "get": {
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get Labels",
        "description": "Get Labels",
        "parameters": [
          {
            "name": "campaign_id",
            "in": "query",
            "description": "Campaign ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          },
          {
            "name": "label_name",
            "in": "query",
            "description": "Label name",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "ref_name",
            "in": "query",
            "description": "<style>\n  .list-flex {\n    display: flex;\n    list-style: none;\n    flex-wrap: wrap;\n  }\n  .list-flex li {\n    width: 200px;\n  }\n</style>\nList of Available Ref Names:\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> ip</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> source</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ad_campaign_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> creative_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> keyword</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ad_campaign_idn</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> sub_id_1..10</div>\n</li>\n</ul>\n",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Labels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Labels"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "tags": [
          "Reports"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Update Labels",
        "description": "Update Labels",
        "requestBody": {
          "description": "Update Labels",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LabelRequestPost"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Labels",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Success"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/stream_filters": {
      "get": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get available flow filters",
        "description": "Returns list of available flow filters",
        "responses": {
          "200": {
            "description": "Flow filter details",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StreamFilter"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/stream_schemas": {
      "get": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get available flow schemas",
        "description": "Returns list of available flow schemas",
        "responses": {
          "200": {
            "description": "List os flow schemas.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StreamAction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/stream_types": {
      "get": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get list of flows types",
        "description": "Returns list of flow types",
        "responses": {
          "200": {
            "description": "List of flow types",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StreamAction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/stream/{id}/events": {
      "get": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get flow events",
        "description": "Returns list of the events.",
        "responses": {
          "200": {
            "description": "Flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/streams_actions": {
      "get": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get available flows actions",
        "description": "Returns available flow actions",
        "responses": {
          "200": {
            "description": "List of flow actions",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/StreamAction"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/streams": {
      "post": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create flow",
        "description": "Creates flow",
        "requestBody": {
          "description": "Create a Flow",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Create a Flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/streams/{id}": {
      "get": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get flow",
        "description": "Returns flow details.",
        "responses": {
          "200": {
            "description": "Flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update flow",
        "description": "Updates flow.",
        "requestBody": {
          "description": "Flows fields to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StreamRequestPut"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Flow details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Delete flow",
        "description": "Moves strema to the archive",
        "responses": {
          "200": {
            "description": "Flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/streams/{id}/disable": {
      "post": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Disable flow",
        "description": "Changes the state to 'disabled'",
        "responses": {
          "200": {
            "description": "Flow details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/streams/{id}/enable": {
      "post": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Enable flow",
        "description": "Changes the state to 'active'.",
        "responses": {
          "200": {
            "description": "Flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/streams/{id}/restore": {
      "post": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Flow ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Restore an Archived Flow",
        "description": "Restore an Archived Flow",
        "responses": {
          "200": {
            "description": "Flow",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stream"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/streams/clean_archive": {
      "post": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clean archive",
        "description": "Clean archive",
        "responses": {
          "200": {
            "description": "The archive was cleaned successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/streams/deleted": {
      "get": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get deleted flows",
        "description": "Returns deleted flows",
        "responses": {
          "200": {
            "description": "Flows list",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Stream"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/streams/search": {
      "get": {
        "tags": [
          "Flows (Streams)"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "query",
            "in": "query",
            "description": "Search query",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "summary": "Search in flows",
        "description": "Searching in flows",
        "responses": {
          "200": {
            "description": "List of results",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Stream"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        },
        "x-code-samples": [
          {
            "lang": "PHP",
            "source": "$ch = curl_init();\ncurl_setopt($ch, CURLOPT_URL, 'http://example.com/admin_api/v1/streams/search?query=string');\ncurl_setopt($ch, CURLOPT_HTTPHEADER, array('Api-Key: your-api-key'));\ncurl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\necho curl_exec($ch);\n"
          }
        ]
      }
    },
    "/traffic_sources": {
      "get": {
        "tags": [
          "Traffic sources"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get traffic sources",
        "description": "Returns list of traffic sources",
        "responses": {
          "200": {
            "description": "List of traffic sources",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Source"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "tags": [
          "Traffic sources"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "requestBody": {
          "description": "Traffic source fields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceRequest"
              }
            }
          }
        },
        "summary": "Create traffic source",
        "description": "Creates traffic source",
        "responses": {
          "200": {
            "description": "Traffic source details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/traffic_sources/{id}": {
      "get": {
        "tags": [
          "Traffic sources"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Traffic source ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get traffic source",
        "description": "Returns traffic source details.",
        "responses": {
          "200": {
            "description": "Traffic source details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "Traffic sources"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Traffic source ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update traffic source",
        "description": "Updates traffic source.",
        "requestBody": {
          "description": "Traffic source fields to update",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SourceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Traffic source details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Traffic sources"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Traffic source ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Delete traffic source",
        "description": "Changes the state to 'deleted'.",
        "responses": {
          "200": {
            "description": "Success"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/traffic_sources/{id}/clone": {
      "post": {
        "tags": [
          "Traffic sources"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "Traffic source ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Clone trafic source",
        "description": "Makes a copy of traffic source.",
        "responses": {
          "200": {
            "description": "Traffic source details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Source"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/traffic_sources/clean_archive": {
      "post": {
        "tags": [
          "Traffic sources"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clean archive",
        "description": "Clean archive",
        "responses": {
          "200": {
            "description": "The archive was cleaned successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users": {
      "get": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Get users",
        "description": "Returns list of the users",
        "responses": {
          "200": {
            "description": "List of the users",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/User"
                  }
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "post": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Create user",
        "description": "Creates user",
        "requestBody": {
          "description": "User fields",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "406": {
            "$ref": "#/components/responses/NotAcceptable"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/{id}": {
      "get": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Get user",
        "description": "Returns user details.",
        "responses": {
          "200": {
            "description": "User details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "put": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update user",
        "description": "Updates user.",
        "requestBody": {
          "description": "User fields to update.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User details.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      },
      "delete": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Delete user",
        "description": "Deletes user. Cannot be reverted.",
        "responses": {
          "201": {
            "description": "User successfully deleted"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/{id}/access": {
      "put": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "description": "User ID",
            "required": true,
            "schema": {
              "type": "integer"
            }
          }
        ],
        "summary": "Update access",
        "description": "Updates access for user.",
        "requestBody": {
          "description": "New access settings.",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRequestAccess"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Updated user details",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "404": {
            "$ref": "#/components/responses/NotFound"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    },
    "/users/clean_archive": {
      "post": {
        "tags": [
          "Users"
        ],
        "security": [
          {
            "ApiKeyAuth": []
          }
        ],
        "summary": "Clean archive",
        "description": "Clean archive",
        "responses": {
          "200": {
            "description": "The archive was cleaned successfully"
          },
          "400": {
            "$ref": "#/components/responses/BadRequest"
          },
          "401": {
            "$ref": "#/components/responses/Unauthorized"
          },
          "402": {
            "$ref": "#/components/responses/PaymentRequired"
          },
          "500": {
            "$ref": "#/components/responses/InternalError"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AffiliateNetwork": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "postback_url": {
            "type": "string"
          },
          "offer_param": {
            "type": "string"
          },
          "state": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "deleted"
            ]
          },
          "template_name": {
            "type": "string"
          },
          "notes": {
            "type": "string"
          },
          "pull_api_options": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "offers": {
            "type": "integer"
          }
        }
      },
      "AffiliateNetworkObject": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Affiliate network name",
            "type": "string"
          },
          "postback_url": {
            "description": "Postback URL for the Affiliate network",
            "type": "string"
          },
          "offer_param": {
            "description": "These params are appends to offer URLs. Example, \"sub1={subid}&sub2={campaign_name}\"",
            "type": "string"
          },
          "notes": {
            "description": "User Notes for the Affiliate network",
            "type": "string"
          }
        }
      },
      "AffiliateNetworkPut": {
        "type": "object",
        "$ref": "#/components/schemas/AffiliateNetworkObject"
      },
      "AffiliateNetworkRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/AffiliateNetworkObject"
          },
          {
            "type": "object",
            "required": [
              "name"
            ]
          }
        ]
      },
      "BotListRequest": {
        "type": "object",
        "properties": {
          "value": {
            "description": "List of IPs. Example, 1.2.3.4\n2.3.4.5",
            "type": "string"
          }
        },
        "required": [
          "value"
        ]
      },
      "Campaign": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "alias": {
            "type": "string",
            "description": "Leave empty to generate automatically."
          },
          "type": {
            "type": "string",
            "enum": [
              "position",
              "weight"
            ],
            "default": "position",
            "description": "Set 'weight' to enable split-testing the flows."
          },
          "name": {
            "type": "string"
          },
          "cookies_ttl": {
            "type": "integer",
            "default": 24
          },
          "position": {
            "type": "integer"
          },
          "state": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "disabled",
              "deleted"
            ]
          },
          "cost_type": {
            "type": "string",
            "default": "CPC",
            "enum": [
              "CPM",
              "CPC",
              "CPUC",
              "RevShare",
              "CPA",
              "CPS",
              "CPUV",
              "CPV"
            ]
          },
          "cost_value": {
            "type": "number",
            "default": 0
          },
          "cost_currency": {
            "type": "string",
            "description": "Leave empty to use tracker currency"
          },
          "group_id": {
            "type": "integer"
          },
          "bind_visitors": {
            "type": "string",
            "enum": [
              "s",
              "sl",
              "slo"
            ],
            "description": "'s' for flows. 'sl' for flows and landing pages. 'slo' for flows, landing pages and offers."
          },
          "traffic_source_id": {
            "type": "integer"
          },
          "token": {
            "type": "string"
          },
          "cost_auto": {
            "type": "boolean",
            "default": false
          },
          "parameters": {
            "$ref": "#/components/schemas/SourceParameters"
          },
          "postbacks": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/S2SPostback"
            }
          },
          "notes": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "CampaignCostRequest": {
        "type": "object",
        "properties": {
          "start_date": {
            "description": "Start date and time. For example, \"2017-09-10 20:10\"",
            "type": "string"
          },
          "end_date": {
            "description": "End date and time. For example, \"2017-09-10 20:10\"",
            "type": "string"
          },
          "timezone": {
            "description": "Timezone for the time range. For example, \"Europe/Madrid\".",
            "type": "string"
          },
          "cost": {
            "description": "Cost for the time range. For example, \"19.22\".",
            "type": "string"
          },
          "currency": {
            "description": "Currency of cost. For example \"EUR\".",
            "type": "string"
          },
          "only_campaign_uniques": {
            "description": "Apply new costs to unique clicks only.",
            "type": "boolean"
          },
          "filters": {
            "$ref": "#/components/schemas/FilterCostRequest"
          }
        },
        "required": [
          "start_date",
          "end_date",
          "timezone",
          "cost",
          "currency"
        ]
      },
      "CampaignCreateRequired": {
        "required": [
          "alias",
          "name"
        ]
      },
      "CampaignRequest": {
        "type": "object",
        "properties": {
          "alias": {
            "description": "Campaign Alias which is Used in URL http://domain.com/ALIAS",
            "type": "string"
          },
          "type": {
            "description": "Flow  Rotation Type",
            "type": "string",
            "default": "position",
            "enum": [
              "position",
              "weight"
            ]
          },
          "name": {
            "description": "Campaign Name",
            "type": "string"
          },
          "cookies_ttl": {
            "description": "When the Click Gets Unique Status Again, in Hours",
            "type": "integer",
            "default": 24
          },
          "state": {
            "type": "string",
            "enum": [
              "active",
              "disabled",
              "deleted"
            ],
            "description": "Campaign State",
            "default": "active"
          },
          "cost_type": {
            "description": "Cost Type",
            "type": "string",
            "default": "CPC",
            "enum": [
              "CPC",
              "CPUC",
              "CPM"
            ]
          },
          "cost_value": {
            "description": "Cost Value",
            "type": "number"
          },
          "cost_currency": {
            "description": "Currency Value EUR/USD/RUB/UAH/GBP. Default Value is Taken from the Tracker's Settings.",
            "type": "string"
          },
          "cost_auto": {
            "description": "Enable Automatic Costs (0/1)",
            "type": "boolean",
            "default": false
          },
          "group_id": {
            "description": "Campaign Group ID",
            "type": "string"
          },
          "bind_visitors": {
            "description": "Bind Visitors Feature (null - disabled/ s - only to streams/ sl - to streams and LPs/ slo — to streams, LPs and offers)",
            "type": "string"
          },
          "traffic_source_id": {
            "description": "Traffic source ID",
            "type": "integer"
          },
          "parameters": {
            "$ref": "#/components/schemas/SourceParameters"
          },
          "token": {
            "description": "Token to gain access to Click API",
            "type": "string"
          },
          "domain_id": {
            "description": "Domain ID",
            "type": "integer"
          },
          "postbacks": {
            "description": "Campaign S2S postback",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/S2SPostback"
            }
          },
          "notes": {
            "description": "Notes for the campaign",
            "type": "string"
          }
        }
      },
      "CleanRequest": {
        "type": "object",
        "required": [
          "start_date",
          "end_date"
        ],
        "properties": {
          "start_date": {
            "description": "The date and the time for the period to delete, e.g. 2017-04-01 10:10",
            "type": "string"
          },
          "end_date": {
            "description": "The date and the time for the period to delete, e.g. 2017-04-01 10:10",
            "type": "string"
          },
          "campaign_id": {
            "description": "Campaign ID",
            "type": "integer"
          },
          "timezone": {
            "description": "Timezone for the dates, e.g., \"UTC\" or \"Europe/Madrid\"",
            "type": "string"
          }
        }
      },
      "ClickRequest": {
        "type": "object",
        "properties": {
          "range": {
            "$ref": "#/components/schemas/RangeRequest"
          },
          "limit": {
            "type": "number",
            "description": "Clicks Request Limit. Either 'limit' or 'range' Parameters are a Must."
          },
          "offset": {
            "type": "number",
            "description": "Offset rows"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterRequest"
            }
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortRequest"
            }
          }
        }
      },
      "ClicksUpdateCostsPayload": {
        "type": "object",
        "properties": {
          "start_date": {
            "description": "Start date and time, e.g., “2017-09-10 20:10”",
            "type": "string"
          },
          "end_date": {
            "description": "End date and time, e.g., “2017-09-10 20:10”",
            "type": "string"
          },
          "cost": {
            "description": "Cost value, e.g., 19.22",
            "type": "number"
          },
          "filters": {
            "$ref": "#/components/schemas/FilterCostRequest"
          }
        },
        "required": [
          "start_date",
          "end_date",
          "timezone",
          "cost",
          "currency"
        ]
      },
      "ClicksUpdateCostsRequest": {
        "type": "object",
        "properties": {
          "campaign_ids": {
            "description": "Array of campaigns IDs",
            "type": "array",
            "items": {
              "type": "integer"
            }
          },
          "costs": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ClicksUpdateCostsPayload"
            }
          },
          "timezone": {
            "description": "Timezone, e.g., Europe/Madrid",
            "type": "string"
          },
          "currency": {
            "description": "Currency, e.g., EUR",
            "type": "string"
          },
          "only_campaign_uniques": {
            "description": "Apply costs only to unique clicks (1 or 0)",
            "type": "integer"
          }
        },
        "required": [
          "campaign_ids",
          "costs"
        ]
      },
      "ConversionRequest": {
        "type": "object",
        "properties": {
          "range": {
            "$ref": "#/components/schemas/RangeRequest"
          },
          "limit": {
            "type": "number",
            "description": "Limit result"
          },
          "offset": {
            "type": "number",
            "description": "Offset for results"
          },
          "columns": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterRequest"
            }
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortRequest"
            }
          }
        }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int32"
          },
          "name": {
            "type": "string"
          },
          "network_status": {
            "type": "string"
          },
          "default_campaign": {
            "type": "string"
          },
          "default_campaign_id": {
            "type": "integer",
            "format": "int32"
          },
          "state": {
            "type": "string",
            "default": "active",
            "enum": [
              "active",
              "deleted"
            ]
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "catch_not_found": {
            "type": "boolean"
          },
          "campaigns_count": {
            "type": "integer",
            "format": "int32"
          },
          "ssl_redirect": {
            "type": "boolean"
          },
          "allow_indexing": {
            "type": "boolean"
          },
          "admin_dashboard": {
            "type": "boolean"
          },
          "cloudflare_proxy": {
            "type": "boolean"
          },
          "group_id": {
            "type": "integer",
            "format": "int32"
          },
          "group": {
            "type": "string"
          },
          "is_ssl": {
            "type": "boolean"
          },
          "dns_provider": {
            "type": "string"
          },
          "error_solution": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      },
      "DomainCreateRequired": {
        "required": [
          "name"
        ]
      },
      "DomainRegister": {
        "type": "object",
        "properties": {
          "registrar": {
            "type": "string"
          },
          "external_id": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "DomainRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Domain name",
            "type": "string"
          },
          "default_campaign_id": {
            "description": "Run campaign on the domain",
            "type": "integer"
          },
          "group_id": {
            "description": "Group ID",
            "type": "string"
          },
          "catch_not_found": {
            "description": "Catch the traffic of non-existent URLs",
            "type": "boolean",
            "default": false
          },
          "notes": {
            "description": "Notes for the domain",
            "type": "string"
          },
          "ssl_redirect": {
            "description": "Force browsers to redirect from HTTP to HTTPS",
            "type": "boolean",
            "default": false
          },
          "allow_indexing": {
            "description": "Allow robots to index the domain content",
            "type": "boolean",
            "default": true
          },
          "admin_dashboard": {
            "description": "Allow access to admin dashboard",
            "type": "boolean",
            "default": false
          }
        }
      },
      "EditorFiles": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "ext": {
            "type": "string"
          },
          "path": {
            "type": "string"
          },
          "children": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/EditorFiles"
            }
          }
        }
      },
      "Error": {
        "type": "object",
        "required": [
          "error"
        ],
        "properties": {
          "error": {
            "type": "string"
          }
        }
      },
      "Facebook": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Intergration ID",
            "type": "integer"
          },
          "integration": {
            "description": "The integration name",
            "type": "string"
          },
          "proxy_enabled": {
            "description": "Use proxy",
            "type": "boolean"
          },
          "name": {
            "description": "The integration name",
            "type": "string"
          },
          "ad_account_id": {
            "description": "Facebook account ID",
            "type": "string"
          },
          "token": {
            "description": "Facebook token",
            "type": "string"
          },
          "last_error": {
            "description": "Last error",
            "type": "string"
          },
          "last_raw_error": {
            "description": "Error message from facebook",
            "type": "string"
          },
          "proxy": {
            "type": "object",
            "properties": {
              "protocol": {
                "description": "Protocol",
                "type": "string",
                "enum": [
                  "http",
                  "https",
                  "socks5"
                ]
              },
              "address": {
                "description": "Proxy address",
                "type": "string"
              },
              "port": {
                "description": "Proxy port",
                "type": "integer"
              },
              "login": {
                "description": "Proxy login",
                "type": "string"
              },
              "password": {
                "description": "Proxy password",
                "type": "string"
              }
            }
          }
        }
      },
      "FacebookRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "The integration name",
            "type": "string"
          },
          "ad_account_id": {
            "description": "Facebook account ID",
            "type": "string"
          },
          "token": {
            "description": "Facebook yoken",
            "type": "string"
          },
          "proxy_enabled": {
            "description": "Use proxy to connect",
            "type": "boolean"
          },
          "proxy": {
            "type": "object",
            "properties": {
              "protocol": {
                "description": "Protocol",
                "type": "string",
                "enum": [
                  "http",
                  "https",
                  "socks5"
                ]
              },
              "address": {
                "description": "Proxy address",
                "type": "string"
              },
              "port": {
                "description": "Proxy port",
                "type": "integer"
              },
              "login": {
                "description": "Proxy login",
                "type": "string"
              },
              "password": {
                "description": "Proxy password",
                "type": "string"
              }
            }
          }
        }
      },
      "Filter": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "stream_id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "mode": {
            "type": "string"
          },
          "payload": {
            "type": "string"
          },
          "oid": {
            "type": "string"
          }
        }
      },
      "FilterCostRequest": {
        "type": "object",
        "description": "Send a key-value object to apply filters to clicks. For example, {\"sub_id_1\": \"1,2,3\", \"source\": \"site.ru\"}.",
        "properties": {
          "keyword": {
            "type": "string"
          },
          "external_id": {
            "type": "string"
          },
          "creative_id": {
            "type": "string"
          },
          "ad_campaign_id": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "sub_id_1": {
            "type": "string"
          },
          "sub_id_2": {
            "type": "string"
          },
          "sub_id_3": {
            "type": "string"
          },
          "sub_id_4": {
            "type": "string"
          },
          "sub_id_5": {
            "type": "string"
          },
          "sub_id_6": {
            "type": "string"
          },
          "sub_id_7": {
            "type": "string"
          },
          "sub_id_8": {
            "type": "string"
          },
          "sub_id_9": {
            "type": "string"
          },
          "sub_id_10": {
            "type": "string"
          },
          "sub_id_11": {
            "type": "string"
          },
          "sub_id_12": {
            "type": "string"
          },
          "sub_id_13": {
            "type": "string"
          },
          "sub_id_14": {
            "type": "string"
          },
          "sub_id_15": {
            "type": "string"
          },
          "sub_id_16": {
            "type": "string"
          },
          "sub_id_17": {
            "type": "string"
          },
          "sub_id_18": {
            "type": "string"
          },
          "sub_id_19": {
            "type": "string"
          },
          "sub_id_20": {
            "type": "string"
          },
          "sub_id_21": {
            "type": "string"
          },
          "sub_id_22": {
            "type": "string"
          },
          "sub_id_23": {
            "type": "string"
          },
          "sub_id_24": {
            "type": "string"
          },
          "sub_id_25": {
            "type": "string"
          },
          "sub_id_26": {
            "type": "string"
          },
          "sub_id_27": {
            "type": "string"
          },
          "sub_id_28": {
            "type": "string"
          },
          "sub_id_29": {
            "type": "string"
          },
          "sub_id_30": {
            "type": "string"
          }
        }
      },
      "FilterRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the field"
          },
          "operator": {
            "type": "string",
            "description": "One of the available operators (<a href=\"#operators\">operators</a>)\n"
          },
          "expression": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "number"
              }
            ],
            "description": "Expression for the filter"
          }
        },
        "required": [
          "name",
          "operator"
        ]
      },
      "FilterStreamRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Flow filter ID. Provide it if you update the filter."
          },
          "name": {
            "type": "string",
            "description": "Flow filter name, see 'retrive-stream-filters' section"
          },
          "mode": {
            "type": "string",
            "description": "Filter mode",
            "enum": [
              "accept",
              "reject"
            ]
          },
          "payload": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Flow payload. This field contains values for filters. For example, for a \"keyword\" Filter an Array [\"value1\", \"value2\"] must be provided"
          }
        },
        "required": [
          "name",
          "mode"
        ]
      },
      "Group": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "position": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          }
        }
      },
      "GroupCreateRequired": {
        "required": [
          "name",
          "type"
        ]
      },
      "GroupRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Group name",
            "type": "string"
          },
          "type": {
            "type": "string",
            "description": "Group type",
            "enum": [
              "campaigns",
              "offers",
              "landings",
              "domains"
            ]
          }
        }
      },
      "LabelRequestPost": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "integer",
            "description": "Campaign ID"
          },
          "ref_name": {
            "type": "string",
            "description": "<style>\n  .list-flex {\n    display: flex;\n    list-style: none;\n    flex-wrap: wrap;\n  }\n  .list-flex li {\n    width: 200px;\n  }\n</style>\nList of available ref names:\n<ul class=\"list-flex\">\n<li class=\"level1\"><div class=\"li\"> ip</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> source</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ad_campaign_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> creative_id</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> keyword</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> ad_campaign_idn</div>\n</li>\n<li class=\"level1\"><div class=\"li\"> sub_id_1..10</div>\n</li>\n</ul>\n"
          },
          "items": {
            "type": "object",
            "properties": {
              "value": {
                "type": "string",
                "description": "An Object like a {\"value\":\"blacklist\"}"
              }
            }
          }
        },
        "required": [
          "campaign_id",
          "ref_name",
          "items"
        ]
      },
      "Labels": {
        "type": "object",
        "additionalProperties": {}
      },
      "Landing": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "landing_type": {
            "type": "string"
          },
          "action_type": {
            "type": "string"
          },
          "action_payload": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "action_options": {
            "type": "object"
          },
          "name": {
            "type": "string"
          },
          "group_id": {
            "type": "integer"
          },
          "offer_count": {
            "type": "integer"
          },
          "notes": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "archive": {
            "type": "string"
          },
          "local_path": {
            "type": "string"
          },
          "preview_path": {
            "type": "string"
          }
        }
      },
      "LandingCreateRequired": {
        "required": [
          "name",
          "landing_type"
        ]
      },
      "LandingRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Landing page name",
            "type": "string"
          },
          "action_payload": {
            "description": "Action payload",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "group_id": {
            "description": "Group ID",
            "type": "string"
          },
          "state": {
            "type": "string",
            "enum": [
              "active",
              "disabled",
              "deleted"
            ],
            "default": "active"
          },
          "landing_type": {
            "description": "Landing page type",
            "type": "string",
            "default": "local",
            "enum": [
              "local",
              "external",
              "preloaded",
              "action"
            ]
          },
          "action_type": {
            "description": "Action type",
            "type": "string",
            "default": "local_file",
            "enum": [
              "local_file",
              "http",
              "curl",
              "status404",
              "show_text",
              "show_html"
            ]
          },
          "url": {
            "description": "URL",
            "type": "string"
          },
          "archive": {
            "description": "ZIP-file encoded to base64.",
            "type": "string"
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          }
        }
      },
      "LandingStream": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "stream_id": {
            "type": "integer"
          },
          "landing_id": {
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "share": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "LandingStreamRequest": {
        "type": "object",
        "properties": {
          "landing_id": {
            "type": "integer",
            "description": "Landing Page ID"
          },
          "share": {
            "type": "integer",
            "description": "Share among others"
          },
          "state": {
            "type": "string",
            "enum": [
              "active",
              "disabled"
            ]
          }
        },
        "required": [
          "landing_id",
          "share"
        ]
      },
      "Logs": {
        "type": "object",
        "properties": {
          "datetime": {
            "type": "string"
          },
          "jid": {
            "type": "string"
          },
          "message": {
            "type": "string"
          }
        }
      },
      "Offer": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "group_id": {
            "type": "integer"
          },
          "action_type": {
            "type": "string"
          },
          "action_payload": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "action_options": {
            "type": "object"
          },
          "affiliate_network_id": {
            "type": "integer"
          },
          "payout_value": {
            "type": "number"
          },
          "payout_currency": {
            "type": "string"
          },
          "payout_type": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "payout_auto": {
            "type": "boolean"
          },
          "payout_upsell": {
            "type": "boolean"
          },
          "country": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notes": {
            "type": "string"
          },
          "affiliate_network": {
            "type": "string"
          },
          "archive": {
            "type": "string"
          },
          "local_path": {
            "type": "string"
          },
          "preview_path": {
            "type": "string"
          },
          "values": {
            "type": "array",
            "items": {
              "type": "object"
            },
            "example": [
              {
                "exampleKey": "exampleValue"
              },
              {
                "price": "100"
              },
              {
                "currency": "EUR"
              }
            ]
          }
        }
      },
      "OfferCreateRequired": {
        "required": [
          "name"
        ]
      },
      "OfferRequest": {
        "type": "object",
        "properties": {
          "name": {
            "description": "Offer name",
            "type": "string"
          },
          "group_id": {
            "description": "Offer group ID",
            "type": "integer"
          },
          "offer_type": {
            "description": "Offer Type ('local'/'external'/'preloaded'/'action')",
            "type": "string"
          },
          "action_type": {
            "description": "Action or redirect type",
            "type": "string"
          },
          "action_payload": {
            "description": "Action payload or URL",
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "affiliate_network_id": {
            "description": "Affiliate network ID",
            "type": "integer"
          },
          "payout_value": {
            "description": "Payout value",
            "type": "number"
          },
          "payout_currency": {
            "description": "Payout currency",
            "type": "string"
          },
          "payout_type": {
            "description": "Payout type",
            "type": "string",
            "enum": [
              "CPA",
              "CPC"
            ]
          },
          "state": {
            "type": "string",
            "enum": [
              "active",
              "deleted"
            ],
            "description": "Offer State",
            "default": "active"
          },
          "payout_auto": {
            "description": "If true, offer receives payout value from postback",
            "type": "boolean",
            "default": false
          },
          "payout_upsell": {
            "description": "Allow offer to get upsells",
            "type": "boolean",
            "default": false
          },
          "country": {
            "description": "Country codes (i.g, [\"US\", \"DE\", \"JP\"])",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "notes": {
            "description": "Notes",
            "type": "string"
          },
          "archive": {
            "description": "ZIP-file encoded to base64",
            "type": "string"
          },
          "conversion_cap_enabled": {
            "description": "Turn on that feature if the offer limit conversions per day",
            "type": "boolean",
            "default": false
          },
          "daily_cap": {
            "description": "Daily limit of conversions, after which the tracker will send traffic to another offer",
            "type": "number"
          },
          "conversion_timezone": {
            "description": "Which timezone is being used by the Affiliate network for calculating conversions, e.g. UTC or Europe/Madrid",
            "type": "string"
          },
          "alternative_offer_id": {
            "description": "Offer id, where to send traffic when daily limit is reached",
            "type": "number"
          }
        }
      },
      "OfferStream": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "stream_id": {
            "type": "integer"
          },
          "offer_id": {
            "type": "integer"
          },
          "state": {
            "type": "string"
          },
          "share": {
            "type": "integer"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          }
        }
      },
      "OfferStreamRequest": {
        "type": "object",
        "properties": {
          "offer_id": {
            "type": "integer",
            "description": "Offer ID"
          },
          "share": {
            "type": "integer",
            "description": "Percentage of Traffic Sent to This Offer"
          },
          "state": {
            "type": "string",
            "enum": [
              "active",
              "disabled"
            ]
          }
        },
        "required": [
          "offer_id",
          "share"
        ]
      },
      "OptionNumber": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "value": {
            "type": "number"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "PlaceholderObject": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "placeholder": {
            "type": "string"
          },
          "alias": {
            "type": "string"
          }
        }
      },
      "RangeRequest": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "Start Date, e.g., '2017-09-10'"
          },
          "to": {
            "type": "string",
            "description": "End Date, e.g., '2017-09-10'"
          },
          "timezone": {
            "type": "string",
            "description": "E.g., Europe/Madrid"
          },
          "interval": {
            "description": "One of the intervals can be used: today, yesterday, 7_days_ago, first_day_of_this_week, 1_month_ago, first_day_of_this_month, 1_year_ago, first_day_of_this_year, all_time\n"
          }
        }
      },
      "Report": {
        "type": "object",
        "properties": {
          "rows": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "total": {
            "type": "integer"
          },
          "meta": {
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "ReportsRequest": {
        "type": "object",
        "properties": {
          "range": {
            "$ref": "#/components/schemas/RangeRequest"
          },
          "dimensions": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "measures": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "filters": {
            "description": "Filters can contain OR and AND logical operators.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterRequest"
            }
          },
          "sort": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SortRequest"
            }
          }
        }
      },
      "S2SPostback": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "description": "Campaign ID",
            "type": "integer"
          },
          "id": {
            "description": "Postback ID",
            "type": "integer"
          },
          "method": {
            "description": "Request method",
            "type": "string",
            "enum": [
              "GET",
              "POST"
            ]
          },
          "statuses": {
            "description": "Conversion status",
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "lead",
                "sale",
                "rejected",
                "rebill"
              ]
            }
          },
          "url": {
            "description": "Postback URL",
            "type": "string"
          }
        }
      },
      "SortRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Column or metric name"
          },
          "order": {
            "type": "string",
            "description": "Order",
            "enum": [
              "ASC",
              "DESC"
            ]
          }
        },
        "required": [
          "name",
          "order"
        ]
      },
      "Source": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "name": {
            "type": "string"
          },
          "postback_url": {
            "type": "string"
          },
          "postback_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "template_name": {
            "type": "string"
          },
          "accept_parameters": {
            "type": "boolean"
          },
          "parameters": {
            "$ref": "#/components/schemas/SourceParameters"
          },
          "notes": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "created_at": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "traffic_loss": {
            "type": "number"
          },
          "update_in_campaigns": {
            "type": "string"
          }
        }
      },
      "SourceParameters": {
        "type": "object",
        "properties": {
          "keyword": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "cost": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "currency": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "external_id": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "creative_id": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "ad_campaign_id": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "source": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_1": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_2": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_3": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_4": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_5": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_6": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_7": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_8": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_9": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_10": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_11": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_12": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_13": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_14": {
            "$ref": "#/components/schemas/PlaceholderObject"
          },
          "sub_id_15": {
            "$ref": "#/components/schemas/PlaceholderObject"
          }
        }
      },
      "SourceRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "postback_url": {
            "type": "string"
          },
          "postback_statuses": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "template_name": {
            "type": "string"
          },
          "accept_parameters": {
            "type": "boolean"
          },
          "parameters": {
            "$ref": "#/components/schemas/SourceParameters"
          },
          "notes": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "traffic_loss": {
            "type": "number"
          }
        }
      },
      "Stream": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "type": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "campaign_id": {
            "type": "integer",
            "format": "int32"
          },
          "position": {
            "type": "integer",
            "format": "int32"
          },
          "weight": {
            "type": "number"
          },
          "action_options": {
            "type": "object"
          },
          "comments": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "updated_at": {
            "type": "string"
          },
          "action_type": {
            "type": "string"
          },
          "action_payload": {
            "oneOf": [
              {
                "type": "string"
              },
              {
                "type": "object"
              }
            ]
          },
          "schema": {
            "type": "string"
          },
          "collect_clicks": {
            "type": "boolean"
          },
          "filter_or": {
            "type": "boolean"
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Filter"
            }
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Trigger"
            }
          },
          "landings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LandingStream"
            }
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferStream"
            }
          },
          "offer_selection": {
            "type": "string",
            "enum": [
              "before_click",
              "after_click"
            ],
            "default": "before_click"
          }
        }
      },
      "StreamAction": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "field": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        }
      },
      "StreamFilter": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string",
            "description": "Filter Name"
          },
          "tooltip": {
            "type": "string",
            "description": "Filter Description"
          },
          "modes": {
            "type": "object",
            "properties": {
              "accept": {
                "type": "string",
                "description": "Accept mode"
              },
              "reject": {
                "type": "string",
                "description": "Reject mode"
              }
            }
          },
          "group": {
            "type": "string",
            "description": "Group ID. It's used to group filters in a filters dropdown menu."
          },
          "template": {
            "type": "string",
            "description": "HTML code for rendering filter body view (Not recommended to use)"
          },
          "header_template": {
            "type": "string",
            "description": "HTML code for rendering filter body view (Not recommended to use)"
          },
          "defaults": {
            "type": "string",
            "description": "Default values"
          }
        }
      },
      "StreamObject": {
        "type": "object",
        "properties": {
          "campaign_id": {
            "type": "integer",
            "description": "Campaign ID"
          },
          "type": {
            "type": "string",
            "description": "Flow type",
            "enum": [
              "forced",
              "regular",
              "default"
            ]
          },
          "name": {
            "type": "string",
            "description": "Flow name"
          },
          "position": {
            "type": "integer",
            "description": "Position of a flow among other flows."
          },
          "weight": {
            "type": "number",
            "description": "Flow weight."
          },
          "action_options": {
            "type": "object",
            "description": "Action options."
          },
          "comments": {
            "type": "string",
            "description": "Comments or notes for the flow"
          },
          "state": {
            "type": "string",
            "enum": [
              "active",
              "disabled",
              "deleted"
            ],
            "description": "State of the flow",
            "default": "active"
          },
          "action_type": {
            "type": "string",
            "description": "Action to perform (see 'Retrieve available flow action types')"
          },
          "schema": {
            "type": "string",
            "enum": [
              "landings",
              "redirect",
              "action"
            ]
          },
          "collect_clicks": {
            "type": "boolean",
            "description": "Flow saves clicks (true/false)",
            "default": false
          },
          "filter_or": {
            "type": "boolean",
            "description": "Use 'OR' operator between filters",
            "default": false
          },
          "filters": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FilterStreamRequest"
            }
          },
          "triggers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/TriggersStreamRequest"
            }
          },
          "landings": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LandingStreamRequest"
            }
          },
          "offers": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/OfferStreamRequest"
            }
          }
        }
      },
      "StreamRequest": {
        "allOf": [
          {
            "$ref": "#/components/schemas/StreamObject"
          },
          {
            "type": "object",
            "required": [
              "campaign_id",
              "schema",
              "type",
              "name",
              "action_type"
            ]
          }
        ]
      },
      "StreamRequestPut": {
        "type": "object",
        "$ref": "#/components/schemas/StreamObject"
      },
      "Success": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean"
          }
        }
      },
      "Time": {
        "type": "object",
        "properties": {
          "date": {
            "type": "string"
          },
          "timezone_type": {
            "type": "integer",
            "format": "int32"
          },
          "timezone": {
            "type": "string"
          }
        }
      },
      "Trigger": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer"
          },
          "oid": {
            "type": "integer"
          },
          "stream_id": {
            "type": "integer"
          },
          "taget": {
            "type": "string"
          },
          "condition": {
            "type": "string"
          },
          "selected_page": {
            "type": "string"
          },
          "pattern": {
            "type": "string"
          },
          "action": {
            "type": "string"
          },
          "interval": {
            "type": "integer"
          },
          "next_run_at": {
            "type": "integer"
          },
          "alternative_urls": {
            "type": "string"
          },
          "grab_from_page": {
            "type": "string"
          },
          "av_settings": {
            "type": "string"
          },
          "reverse": {
            "type": "boolean"
          },
          "enabled": {
            "type": "boolean"
          },
          "scan_page": {
            "type": "boolean"
          }
        }
      },
      "TriggersStreamRequest": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Trigger ID."
          },
          "stream_id": {
            "type": "integer",
            "description": "Flow ID"
          },
          "condition": {
            "type": "string",
            "description": "Condition",
            "enum": [
              "not_respond",
              "always",
              "not_contains",
              "av_detected"
            ]
          },
          "target": {
            "type": "string",
            "description": "Target",
            "enum": [
              "stream",
              "landings",
              "offers",
              "selected_page"
            ]
          },
          "selected_page": {
            "type": "string",
            "description": "The URL of the Page to Check"
          },
          "pattern": {
            "type": "string",
            "description": "Text Pattern to Check"
          },
          "action": {
            "type": "string",
            "description": "Action",
            "enum": [
              "disable",
              "replace_url",
              "grab_from_page"
            ]
          },
          "interval": {
            "type": "integer",
            "description": "Interval between Checks"
          },
          "alternative_urls": {
            "type": "string",
            "description": "URLs for replacement (split by \\n)"
          },
          "grab_from_page": {
            "type": "string",
            "description": "URL of the page that contains a new URL"
          },
          "av_settings": {
            "type": "string",
            "description": "Settings for AV Scanners"
          },
          "reverse": {
            "type": "boolean",
            "description": "Perform also in a reverse mode (true/false)"
          },
          "scan_page": {
            "type": "boolean",
            "description": "Tell AV scanner to scan the page content"
          }
        },
        "required": [
          "condition",
          "action",
          "target",
          "stream_id"
        ]
      },
      "UnprocessableEntity": {
        "type": "object",
        "required": [
          "name"
        ],
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "description": "User ID",
            "type": "integer"
          },
          "login": {
            "description": "User login",
            "type": "string"
          },
          "type": {
            "description": "User type",
            "type": "string",
            "enum": [
              "USER",
              "ADMIN"
            ]
          },
          "access_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserAccessData"
              },
              {
                "type": "object",
                "properties": {
                  "resources": {
                    "description": "Available resources",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "allowed_resources": {
                    "description": "Allowed resources",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "reports": {
                    "description": "Allowed reports",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          },
          "preferences": {
            "description": "User preferences",
            "$ref": "#/components/schemas/UserPreferences"
          }
        }
      },
      "UserAccessData": {
        "type": "object",
        "description": "User access data",
        "properties": {
          "resources": {
            "type": "array",
            "items": {
              "type": "string",
              "enum": [
                "offers",
                "landings",
                "groups",
                "affiliate_networks",
                "traffic_sources",
                "streams",
                "groups",
                "domains",
                "archive",
                "geo_profiles",
                "integrations",
                "logs",
                "geo_dbs",
                "campaigns",
                "api_keys",
                "reports",
                "clicks",
                "conversions",
                "trends",
                "cleaner",
                "dashboard"
              ]
            }
          },
          "offers_access_type": {
            "description": "Offers access type",
            "type": "string",
            "enum": [
              "full_access",
              "read_only",
              "to_groups_and_selected",
              "created_by_user_groups_and_selected"
            ]
          },
          "campaigns_access_type": {
            "description": "Campaigns access type",
            "type": "string",
            "enum": [
              "full_access",
              "read_only",
              "to_groups_and_selected",
              "created_by_user_groups_and_selected"
            ]
          },
          "landings_access_type": {
            "description": "Landing pages access type",
            "type": "string",
            "enum": [
              "full_access",
              "read_only",
              "to_groups_and_selected",
              "created_by_user_groups_and_selected"
            ]
          },
          "traffic_sources_access_type": {
            "description": "Traffic sources access type",
            "type": "string",
            "enum": [
              "full_access",
              "read_only",
              "to_groups_and_selected",
              "created_by_user_groups_and_selected"
            ]
          },
          "streams_access_type": {
            "description": "Flows access type",
            "type": "string",
            "enum": [
              "full_access",
              "read_only",
              "to_groups_and_selected",
              "created_by_user_groups_and_selected"
            ]
          },
          "affiliate_networks_access_type": {
            "description": "Affiliate networks access type",
            "type": "string",
            "enum": [
              "full_access",
              "read_only",
              "to_groups_and_selected",
              "created_by_user_groups_and_selected"
            ]
          },
          "domains_access_type": {
            "description": "Domains access type",
            "type": "string",
            "enum": [
              "full_access",
              "read_only",
              "to_groups_and_selected",
              "created_by_user_groups_and_selected"
            ]
          },
          "offers_selected_entities": {
            "description": "List of available ID offers",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "campaigns_selected_entities": {
            "description": "List of available ID campaigns",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "landings_selected_entities": {
            "description": "List of available ID landings",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "traffic_sources_selected_entities": {
            "description": "List of available ID traffic sources",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "affiliate_networks_selected_entities": {
            "description": "List of available ID affiliate networks",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "domains_selected_entities": {
            "description": "List of available ID domains",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "offers_selected_groups": {
            "description": "List of available group ID",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "campaigns_selected_groups": {
            "description": "List of available groups ID",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "landings_selected_groups": {
            "description": "List of available groups ID",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "traffic_sources_selected_groups": {
            "description": "List of available groups ID",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "affiliate_networks_selected_groups": {
            "description": "List of available groups ID",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "domains_selected_groups": {
            "description": "List of available group ID",
            "type": "array",
            "items": {
              "type": "number"
            }
          },
          "reports": {
            "description": "List of fields to which access is restricted",
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "UserPreferences": {
        "type": "object",
        "properties": {
          "language": {
            "description": "User language",
            "type": "string",
            "enum": [
              "ru",
              "en"
            ]
          },
          "timezone": {
            "description": "User timezone in UTC, e.g., \"Europe/Minsk\"",
            "type": "string"
          }
        }
      },
      "UserRequest": {
        "type": "object",
        "properties": {
          "login": {
            "description": "User login",
            "type": "string"
          },
          "new_password": {
            "description": "User password",
            "type": "string"
          },
          "new_password_confirmation": {
            "description": "Repeat user password",
            "type": "string"
          },
          "type": {
            "description": "User type",
            "type": "string",
            "enum": [
              "USER",
              "ADMIN"
            ]
          },
          "preferences": {
            "description": "User preferences",
            "$ref": "#/components/schemas/UserPreferences"
          }
        },
        "required": [
          "login",
          "type",
          "new_password",
          "new_password_confirmation"
        ]
      },
      "UserRequestAccess": {
        "type": "object",
        "properties": {
          "access_data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/UserAccessData"
              },
              {
                "type": "object",
                "properties": {
                  "resources": {
                    "description": "Available resources",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "reports": {
                    "description": "Allowed reports",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              }
            ]
          }
        }
      },
      "UserRequestUpdate": {
        "type": "object",
        "properties": {
          "login": {
            "description": "User login",
            "type": "string"
          },
          "new_password": {
            "description": "User password",
            "type": "string"
          },
          "new_password_confirmation": {
            "description": "User password repeat",
            "type": "string"
          },
          "type": {
            "description": "User type",
            "type": "string",
            "enum": [
              "USER",
              "ADMIN"
            ]
          },
          "keyCount": {
            "description": "API keys count",
            "type": "integer"
          },
          "preferences": {
            "description": "User preferences",
            "$ref": "#/components/schemas/UserPreferences"
          }
        }
      }
    },
    "responses": {
      "BadRequest": {
        "description": "Bad request",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "InternalError": {
        "description": "Internal error",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "NotAcceptable": {
        "description": "Required fields are not acceptable",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "nameField": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "NotFound": {
        "description": "Entity not found",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "PaymentRequired": {
        "description": "Admin API is not available in that edition",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "Unauthorized": {
        "description": "Access denied",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/Error"
            }
          }
        }
      },
      "UnprocessableEntity": {
        "description": "Unprocessable entity",
        "content": {
          "application/json": {
            "schema": {
              "$ref": "#/components/schemas/UnprocessableEntity"
            }
          }
        }
      }
    },
    "securitySchemes": {
      "ApiKeyAuth": {
        "type": "apiKey",
        "in": "header",
        "name": "Api-Key",
        "description": "Authorization required \"Api-Key\" header.\n"
      }
    }
  }
}
